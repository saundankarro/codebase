import numpy as np
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import statistics
# %matplotlib inline

print(f"Reading Training Data")
path = "dataset/Training.csv"
data = pd.read_csv(path).dropna(axis=1)

print(f"Counting disease prognoses.")
disease_counts = data["prognosis"].value_counts()

print(f"Creating barplot on Count of disease prognoses")
temp_df = pd.DataFrame({
    "Disease": disease_counts.index,
    "Counts": disease_counts.values
})

plt.figure(figsize=(18,8))
sns.barplot(x="Disease", y="Counts", data=temp_df)
plt.xticks(rotation=90)
plt.show()

print(f"Encoding prognosis to numerical value to help train machine learning model")
encoder = LabelEncoder()
data["prognosis"] = encoder.fit_transform(data["prognosis"])

X = data.iloc[:,:-1]
Y = data.iloc[:,-1]
X_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size=0.2, random_state=24)

print(f"Training data for X: {X_Train.shape}.\nTraining data for Y: {Y_Train.shape}")
print(f"Testing data for X: {X_Test.shape}.\nTesting data for Y: {Y_Test.shape}\n")

def cv_scoring(estimator, X, Y):
    return accuracy_score(Y, estimator.predict(X))

models = {
    "SVC":SVC(),
    "Gaussian NB": GaussianNB(),
    "Random Forest": RandomForestClassifier(random_state=18)
}

for model in models:
    nm = models[model]
    scores = cross_val_score(nm, X, Y, cv=10,
                             n_jobs=1,
                             scoring=cv_scoring)
    
    print("=="*30)
    print(model)
    print(f"Scores:- {scores}")
    print(f"Mean Scure:- {np.mean(scores)}\n")

print(f"Training and Testing the SVM Classifier")
svm_model = SVC()
svm_model.fit(X_Train, Y_Train)
preds = svm_model.predict(X_Test)

print(f"Accuracy on training data for SVM Classifier is: {accuracy_score(Y_Train, svm_model.predict(X_Train))*100}")
print(f"Accuracy on testing data for SVM Classifier is: {accuracy_score(Y_Test, preds)*100}")

cf_matrix = confusion_matrix(Y_Test, preds)
plt.figure(figsize=(12,8))
sns.heatmap(cf_matrix, annot=True)
plt.title("Confusion Matrix for SVM Classifier on Test Data")
plt.show()

print(f"Training and Testing Naive Bayes Classifier")
nb_model = GaussianNB()
nb_model.fit(X_Train, Y_Train)
preds = nb_model.predict(X_Test)
print(f"Accuracy on training data by Naive Bayes Classifier: {accuracy_score(Y_Train, nb_model.predict(X_Train))*100}")
print(f"Accuracy on training data by Naive Bayes Classifier: {accuracy_score(Y_Test, preds)*100}")

cf_matrix = confusion_matrix(Y_Test, preds)
plt.figure(figsize=(12,8))
sns.heatmap(cf_matrix, annot=True)
plt.title("Confusion Matrix for Naive Bayes Classifier on Test Data")
plt.show()

print(f"Training and Testing Random Forest Classifier")
rf_model = RandomForestClassifier(random_state=18)
rf_model.fit(X_Train, Y_Train)
preds = rf_model.predict(X_Test)
print(f"Accuracy on training data by Random Forest Classifier: {accuracy_score(Y_Train, nb_model.predict(X_Train))*100}")
print(f"Accuracy on training data by Random Forest Classifier: {accuracy_score(Y_Test, preds)*100}")

cf_matrix = confusion_matrix(Y_Test, preds)
plt.figure(figsize=(12,8))
sns.heatmap(cf_matrix, annot=True)
plt.title("Confusion Matrix for Random Forest Classifier on Test Data")
plt.show()

print(f"Training the models on whole data")
fin_svm_model = SVC()
fin_nb_model = GaussianNB()
fin_rf_model = RandomForestClassifier()

fin_svm_model.fit(X,Y)
fin_nb_model.fit(X,Y)
fin_rf_model.fit(X,Y)

print(f"Reading the testing data")
test_data = pd.read_csv("./dataset/Testing.csv").dropna(axis=1)

Test_X = test_data.iloc[:,:-1]
Test_Y = encoder.transform(test_data.iloc[:, -1])

print(f"Making encompassing predictions by taking the mode of the predictions generated by all the classifiers")
svm_preds = fin_svm_model.predict(Test_X)
nb_preds = fin_nb_model.predict(Test_X)
rf_preds = fin_rf_model.predict(Test_X)

fin_preds = [stats.mode([i,j,k])[0] for i,j,k in zip(svm_preds, nb_preds, rf_preds)]

print(f"Accuracy on the Test dataset by the combined models: {accuracy_score(Test_Y, fin_preds)*100}")

cf_matrix = confusion_matrix(Test_Y, fin_preds)
plt.figure(figsize=(12,8))

sns.heatmap(cf_matrix, annot=True)
plt.title("Confusion Matrix for the Combind Models on Test Dataset")
plt.show()

symptoms = X.columns.values

print(f"Creating a symptom index dictionary in order to encode the input symptoms in numerical form")

symptom_index = {}

for i,v in enumerate(symptoms):
    symptom = " ".join([i.capitalize() for i in v.split("_")])
    symptom_index[symptom] = i

data_dict = {
    "symptom_index":symptom_index,
    "predictions_classes":encoder.classes_
}

def predictDisease(symptoms):
    symptoms = symptoms.split(",")

    input_data = [0]*len(data_dict["symptom_index"])
    for symptom in symptoms:
        index = data_dict["symptom_index"][symptom]
        input_data[index] = 1

        input_data = np.array(input_data).reshape(1,-1)

        rf_pred = data_dict["predictions_classes"][final_rf_model.predict(input_data)[0]]
        nb_pred = data_dict["predictions_classes"][final_nb_model.predict(input_data)[0]]
        svm_pred = data_dict["predictions_classes"][final_svm_model.predict(input_data)[0]]

        fin_pred = statistics.mode([rf_pred, nb_pred, svm_pred])
        predictions = {
            "rf_model_predicton": rf_pred,
            "naive_bayes_prediction":nb_pred,
            "svm_model_prediction":svm_pred,
            "final_prediction":fin_pred
        }
        return predictions
    
    print(predictDisease("Itching,Skin,Rash,Nodal Skin Eruptions"))